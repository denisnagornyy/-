import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Заданные параметры
m0 = 14320  # начальная масса ракеты, кг
fuel_mass = 9440  # масса топлива, кг
burn_time = 65  # время работы двигателя, с
thrust = 264600  # сила тяги, Н
Cd = 0.4  # коэффициент аэродинамического сопротивления
rho0 = 1.225  # плотность воздуха на уровне моря, кг/м^3
g = 9.81  # ускорение свободного падения, м/с^2
S = np.pi * (1.65 / 2) ** 2  # площадь поперечного сечения, м^2
mdot = fuel_mass / burn_time  # скорость расхода топлива, кг/с
R = 6371000  # радиус Земли, м
Ms = 5.972e24  # масса Земли, кг
G = 6.67430e-11  # гравитационная постоянная, м^3/(кг*с^2)


# Функция изменения плотности воздуха в зависимости от высоты
def air_density(h):
    if h < 11000:  # тропосфера
        return rho0 * (1 - 0.0065 * h / 288.15) ** 4.256
    elif h < 20000:  # нижняя стратосфера
        return rho0 * 0.22336 * np.exp(-0.000157 * (h - 11000))
    else:  # выше 20 км
        return 0

# Система дифференциальных уравнений
def rocket_dynamics(t, y):
    h, v, m = y  # высота, скорость, масса
    if m > m0 - fuel_mass:  # пока есть топливо
        F = thrust  # тяга
        dm_dt = -mdot  # изменение массы
    else:  # топливо закончилось
        F = 0
        dm_dt = 0

    D = 0.5 * Cd * air_density(h) * v ** 2 * S  # сила сопротивления воздуха
    g_eff = G * Ms / (R + h) ** 2  # эффективное ускорение свободного падения

    dv_dt = (F - D - m * g_eff) / m  # уравнение движения
    dh_dt = v  # скорость - производная высоты
    return [dh_dt, dv_dt, dm_dt]


# Начальные условия
h0 = 0  # начальная высота, м
v0 = 0  # начальная скорость, м/с
y0 = [h0, v0, m0]  # начальные условия (высота, скорость, масса)

# Временной интервал для моделирования
t_span = (0, 200)  # от 0 до 200 секунд
t_eval = np.linspace(*t_span, 1000)  # временные точки для вывода

# Численное решение
solution = solve_ivp(rocket_dynamics, t_span, y0, t_eval=t_eval, method='RK45')

# Данные для графиков
time = solution.t
height = solution.y[0]
velocity = solution.y[1]
mass = solution.y[2]

# Построение графиков
plt.figure(figsize=(12, 8))

# График высоты
plt.subplot(3, 1, 1)
plt.plot(time, height / 1000, label="Высота (км)", color="blue")
plt.xlabel("Время (с)")
plt.ylabel("Высота (км)")
plt.grid()
plt.legend()

# График скорости
plt.subplot(3, 1, 2)
plt.plot(time, velocity, label="Скорость (м/с)", color="green")
plt.xlabel("Время (с)")
plt.ylabel("Скорость (м/с)")
plt.grid()
plt.legend()

# График массы
plt.subplot(3, 1, 3)
plt.plot(time, mass, label="Масса (кг)", color="red")
plt.xlabel("Время (с)")
plt.ylabel("Масса (кг)")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
